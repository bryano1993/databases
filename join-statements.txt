1.How do you find related data held in two separate data tables?

- By using a JOIN method statement

2.Explain, in your own words, the difference between an INNER JOIN, LEFT OUTER JOIN, and RIGHT OUTER JOIN. Give a real-world example for each.

INNER JOIN
    Only shows rows from both tables that have a match between columns.
For example, if table 1 has dogs data and table 2 has human data, we can use an INNER JOIN to show which dogs are assigned to which human as pets .

LEFT OUTER JOIN 
    Performs a join starting with the first (left-most) table and matches any second (right-most) table records. It shows data for all the rows in the first table.
For example, if table 1 is a customer list for a product and table 2 is the orders placed last month, a LEFT OUTER JOIN can be used to display all customers, whether they placed orders in the last month or not.

RIGHT OUTER JOIN
    Performs a join starting with the second (right-most) table and matches any first (left-most) table records. It shows data for all the rows in the second table.
Continuing with the example above, we can use a RIGHT OUTER JOIN to display all order placed last month along with each customer who placed it.


3.Define primary key and foreign key. Give a real-world example for each.

    Primary key - A unique identifier for each row in a database table. 
                    ex) Soldier id
    foreign key - The primary key of one table that is included as a non-unique attribute in another table.
                    Ex) department id in the soldier table with a foreign key, while its a primary key for a family table.

4.Define aliasing.

    The technique of creating short variable names, usually a single letter, to replace the table name in a query.

5.Change this query so that you are using aliasing:

    SELECT professor.name, compensation.salary,
    compensation.vacation_days FROM professor JOIN
    compensation ON professor.id =
    compensation.professor_id;

    SELECT p.name, c.salary, 
    compensation.vacation_days FROM professor AS p
    JOIN compensation AS c ON p.id = 
    c.professor_id;

6.Why would you use a NATURAL JOIN? Give a real-world example.

    You would use it to join two tables that have at least one shared column.

    For example, if table 1 has criminal data and table 2 has police data, and the only shared column is criminal_id, NATURAL join will display all unique columns of table 1 and 2.


7.Using this Employee schema and data, write queries to find the following information:

    List all employees and all shifts.

    SELECT employees.name, shifts.date, shifts.start_time, shifts.end_time
    FROM employees
    JOIN scheduled_shifts
    ON employees.id = scheduled_shifts.employee_id
    JOIN shifts
    ON scheduled_shifts.shift_id = shifts.id;

8.Using this Adoption schema and data, please write queries to retrieve the following information and include the results:

    Create a list of all volunteers. If the volunteer is fostering a dog, include each dog as well.

    SELECT *
    FROM volunteers
    LEFT OUTER JOIN dogs
    ON volunteers.foster_dog_id = dogs.id

    The cat's name, adopter's name, and adopted date for each cat adopted within the past month to be displayed as part of the "Happy Tail" social media promotion which posts recent successful adoptions.

    SELECT cats.name, adopters.first_name, adopters.last_name, cat_adoptions.date
    FROM adopters
    JOIN cat_adoptions
    ON adopters.id = cat_adoptions.adopter_id
    JOIN cats
    ON cat_adoptions.cat_id = cats.id
    WHERE cat_adoptions.date > CURRENT_DATE - INTERVAL '30 DAYS';


    Create a list of adopters who have not yet chosen a dog to adopt.

    SELECT adopters.first_name, adopters.last_name
    FROM adopters
    LEFT JOIN dog_adoptions
    ON adopters.id = dog_adoptions.adopter_id
    WHERE dog_adoptions.adopter_id IS NULL;

    Lists of all cats and all dogs who have not been adopted.

    SELECT cats.name, cats.gender, cats.age
    FROM cats
    LEFT JOIN cat_adoptions
    ON cats.id = cat_adoptions.cat_id
    WHERE cat_adoptions.cat_id IS NULL

    SELECT dogs.name, dogs.gender, dogs.age
    FROM dogs
    LEFT JOIN dog_adoptions
    ON dogs.id = dog_adoptions.dog_id
    WHERE dog_adoptions.dog_id IS NULL

    The name of the person who adopted Rosco.

    SELECT adopters.first_name, adopters.last_name, dogs.name
    FROM adopters
    JOIN dog_adoptions
    ON adopters.id = dog_adoptions.adopter_id
    JOIN dogs
    ON dog_adoptions.dog_id = dogs.id
    WHERE dogs.name = 'Rosco';


9.Using this Library schema and data, write queries applying the following scenarios and include the results:

    To determine if the library should buy more copies of a given book, please provide the names and position, in order, of all of the patrons with a hold (request for a book with all copies checked out) on "Advanced Potion-Making".

    SELECT patrons.name, holds.rank, books.title
    FROM patrons
    JOIN holds
    ON patrons.id = holds.patron_id
    JOIN books
    ON holds.isbn = books.isbn
    WHERE books.title = 'Advanced Potion-Making'
    ORDER BY holds.rank;

    List all of the library patrons. If they have one or more books checked out, list the books with the patrons.

    SELECT patrons.name, books.isbn, books.title
    FROM patrons
    LEFT JOIN transactions
    ON patrons.id = transactions.patron_id
    JOIN books
    ON transactions.isbn = books.isbn;